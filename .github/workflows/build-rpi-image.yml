name: Build Teo der Topf Raspberry Pi Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: 'false'
      custom_hostname:
        description: 'Custom hostname'
        required: false
        default: 'teo-der-topf'

env:
  IMAGE_NAME: teo-der-topf

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Teo repository
      uses: actions/checkout@v4
      with:
        path: teo-source
        fetch-depth: 0
        
    - name: Checkout rpi-image-gen
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/rpi-image-gen
        ref: master
        path: rpi-image-gen
        
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support fdisk kpartx zip unzip wget curl
        sudo update-binfmts --enable qemu-arm
        sudo update-binfmts --enable qemu-aarch64
        sudo apt-get install -y genimage mtools mmdebstrap bdebstrap crudini pv dctrl-tools
        
    - name: Extract version and build info
      id: version
      run: |
        cd teo-source
        VERSION=$(grep -oP '__version__\s*=\s*"\K[^"]+' version.py || echo "dev")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        BUILD_DATE=$(date +%Y%m%d-%H%M)
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        IMAGE_FULL_NAME="${{ env.IMAGE_NAME }}-v${VERSION}-${BUILD_DATE}-${COMMIT_SHA}"
        echo "image_name=$IMAGE_FULL_NAME" >> $GITHUB_OUTPUT
        
    - name: Create rpi-image-gen configuration with Pi Imager support
      run: |
        cd rpi-image-gen
        
        cat > config/teo-config << 'EOF'
        # Base Image Configuration
        IMG_NAME="${{ steps.version.outputs.image_name }}"
        RELEASE="bookworm"
        TARGET_ARCH="armhf"
        
        # Pi Imager compatible defaults (can be overridden)
        FIRST_USER_NAME="iot"
        FIRST_USER_PASS="iot2023!"
        ENABLE_SSH=1
        
        # Network Configuration for Pi Imager
        WPA_COUNTRY="DE"
        
        # Locale and Timezone
        TIMEZONE_DEFAULT="Europe/Berlin"
        KEYBOARD_KEYMAP="de"
        KEYBOARD_LAYOUT="German"
        
        # Hardware Configuration
        ENABLE_UART=1
        ENABLE_SPI=1
        ENABLE_I2C=1
        ENABLE_I2S=1
        ENABLE_CAMERA=0
        
        # System Configuration        
        HOSTNAME="${{ github.event.inputs.custom_hostname != '' && github.event.inputs.custom_hostname || 'teo-der-topf' }}"
        
        # Image optimization
        ENABLE_REDUCE_DISK=1
        ROOT_PART_SIZE=3072
        BOOT_SIZE=256
        SKIP_FIRST_RUN_UPDATE=1
        EOF
        
    - name: Create Teo setup stages with Pi Imager support
      run: |
        cd rpi-image-gen
        
        mkdir -p stage-teo/{00-pi-imager-support,01-packages,02-python-env,03-teo-project,04-system-config,05-optimization}
        
        # Stage 0: Pi Imager Support Integration
        cat > stage-teo/00-pi-imager-support/01-pi-imager-support.sh << 'EOF'
        #!/bin/bash -e
        
        # Create firstrun.sh script for Pi Imager advanced options support
        cat > "${ROOTFS_DIR}/boot/firstrun.sh" << 'FIRSTRUN_EOF'
        #!/bin/bash
        
        set +e
        
        # Pi Imager firstrun script for Teo der Topf
        # This script handles advanced options set via Pi Imager
        
        CURRENT_HOSTNAME=$(hostname)
        
        # If userconf.txt exists (set via Pi Imager), process it
        if [ -f /boot/userconf.txt ]; then
            echo "Processing Pi Imager user configuration..."
            source /boot/userconf.txt
            
            # Create user if specified and different from default
            if [ -n "$PI_USER" ] && [ "$PI_USER" != "iot" ]; then
                echo "Creating Pi Imager user: $PI_USER"
                useradd -m -s /bin/bash "$PI_USER"
                usermod -aG sudo,adm,dialout,cdrom,floppy,audio,dip,video,plugdev,netdev,spi,i2c,gpio "$PI_USER"
                
                if [ -n "$PI_PASS" ]; then
                    echo "$PI_USER:$PI_PASS" | chpasswd
                fi
                
                # Update systemd service to run under new user
                sed -i "s/User=iot/User=$PI_USER/g" /etc/systemd/system/teo-der-topf.service
                sed -i "s/Group=iot/Group=$PI_USER/g" /etc/systemd/system/teo-der-topf.service
                sed -i "s|WorkingDirectory=/home/iot/teotopf|WorkingDirectory=/home/$PI_USER/teotopf|g" /etc/systemd/system/teo-der-topf.service
                sed -i "s|Environment=PATH=/home/iot/teo-venv/bin|Environment=PATH=/home/$PI_USER/teo-venv/bin|g" /etc/systemd/system/teo-der-topf.service
                sed -i "s|ExecStart=/home/iot/teo-venv/bin/python main.py|ExecStart=/home/$PI_USER/teo-venv/bin/python main.py|g" /etc/systemd/system/teo-der-topf.service
                
                # Move teo project to new user
                if [ -d /home/iot/teotopf ]; then
                    mv /home/iot/teotopf /home/$PI_USER/
                    mv /home/iot/teo-venv /home/$PI_USER/
                    chown -R $PI_USER:$PI_USER /home/$PI_USER/teotopf
                    chown -R $PI_USER:$PI_USER /home/$PI_USER/teo-venv
                fi
                
                # Update autologin to new user
                sed -i "s/--autologin iot/--autologin $PI_USER/g" /etc/systemd/system/getty@tty1.service.d/autologin.conf
                
                # Remove default iot user if different user was created
                userdel -r iot 2>/dev/null || true
            fi
            
            rm -f /boot/userconf.txt
        fi
        
        # Handle SSH enablement from Pi Imager
        if [ -f /boot/ssh ]; then
            systemctl enable ssh
            rm -f /boot/ssh
        fi
        
        # Handle WiFi configuration from Pi Imager
        if [ -f /boot/wpa_supplicant.conf ]; then
            echo "Configuring WiFi from Pi Imager settings..."
            mv /boot/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
            chmod 600 /etc/wpa_supplicant/wpa_supplicant.conf
            systemctl enable wpa_supplicant
        fi
        
        # Reload systemd and restart Teo service if user was changed
        systemctl daemon-reload
        systemctl enable teo-der-topf.service
        
        # Remove this script after first run
        rm -f /boot/firstrun.sh
        sed -i '/firstrun\.sh/d' /boot/config.txt
        
        exit 0
        FIRSTRUN_EOF
        
        chmod +x "${ROOTFS_DIR}/boot/firstrun.sh"
        
        # Add firstrun.sh to config.txt for execution on first boot
        echo "" >> "${ROOTFS_DIR}/boot/config.txt"
        echo "# Pi Imager firstrun script" >> "${ROOTFS_DIR}/boot/config.txt"
        echo "kernel=kernel8.img" >> "${ROOTFS_DIR}/boot/config.txt" || true
        
        # Create empty files that Pi Imager can populate
        touch "${ROOTFS_DIR}/boot/ssh"
        touch "${ROOTFS_DIR}/boot/userconf.txt"
        touch "${ROOTFS_DIR}/boot/wpa_supplicant.conf"
        EOF
        
        # Stage 1: Package Installation
        cat > stage-teo/01-packages/01-install-packages.sh << 'EOF'
        #!/bin/bash -e
        
        on_chroot << CHEOF
        apt-get update -y
        apt-get install -y --no-install-recommends \
          vim mc git make gcc cmake build-essential \
          python3 python3-pip python3-venv python3-dev python3-pil python3-numpy \
          fonts-dejavu i2c-tools libopenjp2-7 libfreetype6-dev libjpeg-dev \
          libpng-dev zlib1g-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python3-tk
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        CHEOF
        EOF
        
        # Stage 2: Python Environment
        cat > stage-teo/02-python-env/01-python-setup.sh << 'EOF'
        #!/bin/bash -e
        
        on_chroot << CHEOF
        sudo -u iot python3 -m venv /home/iot/teo-venv
        sudo -u iot /home/iot/teo-venv/bin/pip install --upgrade pip setuptools wheel
        CHEOF
        EOF
        
        # Stage 3: Teo Project Installation
        cat > stage-teo/03-teo-project/01-copy-project.sh << 'EOF'
        #!/bin/bash -e
        
        install -d "${ROOTFS_DIR}/home/iot/teotopf"
        cp -r "${WORK_DIR}/../teo-source/"* "${ROOTFS_DIR}/home/iot/teotopf/"
        
        on_chroot << CHEOF
        chown -R iot:iot /home/iot/teotopf
        chmod +x /home/iot/teotopf/app.sh
        chmod +x /home/iot/teotopf/stop_app.sh
        chmod +x /home/iot/teotopf/ApplicationSetup.sh
        
        cd /home/iot/teotopf
        if [ -f requirements.txt ]; then
            sudo -u iot /home/iot/teo-venv/bin/pip install -r requirements.txt
            echo "PYTHON PACKAGES PRE-INSTALLED IN IMAGE BUILD - $(date)" > .python-packages-ready
            chown iot:iot .python-packages-ready
        fi
        
        if [ -f tools/DownloadAnimatedEmotions.py ]; then
            sudo -u iot /home/iot/teo-venv/bin/python tools/DownloadAnimatedEmotions.py || true
        fi
        CHEOF
        EOF
        
        # Stage 4: System Configuration
        cat > stage-teo/04-system-config/01-hardware-config.sh << 'EOF'
        #!/bin/bash -e
        
        on_chroot << CHEOF
        raspi-config nonint do_serial 0
        raspi-config nonint do_spi 0
        raspi-config nonint do_i2s 0
        raspi-config nonint do_i2c 0
        raspi-config nonint do_camera 1
        raspi-config nonint do_overscan 1
        raspi-config nonint do_memory_split 16
        CHEOF
        
        cat >> "${ROOTFS_DIR}/boot/config.txt" << CONFIG_EOF
        
        # Teo der Topf optimized configuration
        gpu_mem=16
        disable_camera_led=1
        dtparam=audio=off
        dtparam=spi=on
        dtparam=i2c_arm=on
        dtparam=i2s=on
        enable_uart=1
        
        # Performance optimization
        arm_freq=1000
        core_freq=500
        sdram_freq=500
        over_voltage=2
        CONFIG_EOF
        EOF
        
        # Stage 4b: Autologin Setup
        cat > stage-teo/04-system-config/02-autologin.sh << 'EOF'
        #!/bin/bash -e
        
        install -d "${ROOTFS_DIR}/etc/systemd/system/getty@tty1.service.d"
        cat > "${ROOTFS_DIR}/etc/systemd/system/getty@tty1.service.d/autologin.conf" << AUTOLOGIN_EOF
        [Service]
        ExecStart=
        ExecStart=-/sbin/agetty --autologin iot --noclear %I \$TERM
        AUTOLOGIN_EOF
        EOF
        
        # Stage 4c: Systemd Service
        cat > stage-teo/04-system-config/03-systemd-service.sh << 'EOF'
        #!/bin/bash -e
        
        cat > "${ROOTFS_DIR}/etc/systemd/system/teo-der-topf.service" << SERVICE_EOF
        [Unit]
        Description=Teo der Topf Application
        After=network-online.target
        Wants=network-online.target
        
        [Service]
        Type=simple
        User=iot
        Group=iot
        WorkingDirectory=/home/iot/teotopf
        Environment=PATH=/home/iot/teo-venv/bin
        ExecStartPre=/bin/sleep 30
        ExecStart=/home/iot/teo-venv/bin/python main.py
        Restart=always
        RestartSec=10
        StandardOutput=journal
        StandardError=journal
        
        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF
        
        on_chroot << CHEOF
        systemctl enable teo-der-topf.service
        CHEOF
        
        cat >> "${ROOTFS_DIR}/home/iot/.profile" << PROFILE_EOF
        
        # Teo der Topf fallback autostart
        if ! systemctl is-active --quiet teo-der-topf.service; then
            echo "Starting Teo der Topf application..."
            sleep 10
            cd /home/iot/teotopf && /home/iot/teo-venv/bin/python main.py &
        fi
        PROFILE_EOF
        
        on_chroot << CHEOF
        chown iot:iot /home/iot/.profile
        CHEOF
        EOF
        
        # Stage 5: Optimization and Build Info
        cat > stage-teo/05-optimization/01-cleanup.sh << 'EOF'
        #!/bin/bash -e
        
        on_chroot << CHEOF
        find /var/log -type f -name "*.log" -delete 2>/dev/null || true
        find /var/log -type f -name "*.log.*" -delete 2>/dev/null || true
        find /tmp -type f -delete 2>/dev/null || true
        find /var/tmp -type f -delete 2>/dev/null || true
        apt-get clean
        apt-get autoremove -y
        dd if=/dev/zero of=/EMPTY bs=1M 2>/dev/null || true
        rm -f /EMPTY
        CHEOF
        EOF
        
        cat > stage-teo/05-optimization/02-build-info.sh << 'EOF'
        #!/bin/bash -e
        
        cat > "${ROOTFS_DIR}/home/iot/BUILD_INFO.txt" << BUILD_INFO_EOF
        Teo der Topf - Raspberry Pi Image
        =================================
        
        Build Information:
        - Version: ${{ steps.version.outputs.version }}
        - Build Date: ${{ steps.version.outputs.build_date }}
        - Commit: ${{ steps.version.outputs.commit_sha }}
        - GitHub Run: ${{ github.run_number }}
        
        Pi Imager Support:
        - WiFi configuration via Pi Imager advanced options
        - User account override via Pi Imager
        - SSH enablement via Pi Imager
        - Automatic fallback to iot/iot2023! if not configured
        
        System Configuration:
        - Base OS: Raspberry Pi OS Lite (Bookworm, 32-bit)
        - Default User: iot (changeable via Pi Imager)
        - Default Password: iot2023! (changeable via Pi Imager)
        - Hardware: SPI, I2C, UART, I2S enabled
        - Python: Virtual environment in /home/[user]/teo-venv
        - Application: Auto-start via systemd service
        
        Pi Imager Instructions:
        1. Use Raspberry Pi Imager
        2. Select this custom image
        3. Click gear icon for advanced options
        4. Configure WiFi, user, SSH as desired
        5. Flash and boot - Teo will start automatically!
        
        Manual Access (if using defaults):
        - SSH: ssh iot@<raspberry-pi-ip>
        - Password: iot2023!
        
        Application Control:
        - Status: systemctl status teo-der-topf
        - Logs: journalctl -u teo-der-topf -f
        - Manual start: /home/[user]/teotopf/app.sh
        - Manual stop: /home/[user]/teotopf/stop_app.sh
        BUILD_INFO_EOF
        
        on_chroot << CHEOF
        chown iot:iot /home/iot/BUILD_INFO.txt
        CHEOF
        EOF
        
        find stage-teo -name "*.sh" -exec chmod +x {} \;
        
    - name: Integrate stages into build process
      run: |
        cd rpi-image-gen
        sed -i '/run_stage.*stage2/a run_stage ./stage-teo' build.sh

    # - name: Install dependencies
    #   run: |
    #     cd rpi-image-gen
    #     sudo ./install_deps.sh

    - name: Build optimized image with Pi Imager support
      run: |
        cd rpi-image-gen
        
        export CONFIG_FILE="config/teo-config"
        export WORK_DIR="$(pwd)/work"
        export DEPLOY_DIR="$(pwd)/deploy"
        export IMG_NAME="${{ steps.version.outputs.image_name }}"
        
        mkdir -p "$WORK_DIR" "$DEPLOY_DIR"
        
        if [ "${{ github.event.inputs.debug_enabled }}" = "true" ]; then
            export LOG_LEVEL="2"
            set -x
        fi
        
        sudo -E ./build.sh
        
    - name: Post-process and create release package
      run: |
        cd rpi-image-gen/deploy
        
        IMAGE_FILE=$(find . -name "*.img" | head -n1)
        FINAL_NAME="${{ steps.version.outputs.image_name }}.img"
        
        mv "$IMAGE_FILE" "$FINAL_NAME"
        
        sha256sum "$FINAL_NAME" > "${FINAL_NAME}.sha256"
        md5sum "$FINAL_NAME" > "${FINAL_NAME}.md5"
        
        echo "Compressing image..."
        zip -9 "${FINAL_NAME}.zip" "$FINAL_NAME" "${FINAL_NAME}.sha256" "${FINAL_NAME}.md5"
        
        cat > "INSTALLATION_GUIDE.md" << GUIDE_EOF
        # 🤖 Teo der Topf - Installation Guide
        
        ## 🚀 Quick Start with Raspberry Pi Imager (Recommended)
        
        1. **Download** [Raspberry Pi Imager](https://www.raspberrypi.org/software/)
        2. **Extract** this ZIP file and select the .img file in Pi Imager
        3. **Click the gear icon** ⚙️ for advanced options:
           - ✅ **Enable SSH** (set username/password if desired)
           - ✅ **Configure WiFi** (SSID and password)
           - ✅ **Set username and password** (or leave default: iot/iot2023!)
           - ✅ **Set locale settings**
        4. **Flash to SD card** (minimum 8GB, recommend 16GB Class 10)
        5. **Insert SD card** into Raspberry Pi and power on
        6. **Done!** 🎉 Teo starts automatically
        
        ## 📋 Default Configuration (if not using Pi Imager advanced options)
        - **Username:** iot
        - **Password:** iot2023!
        - **SSH:** Enabled
        - **WiFi:** Not configured (use ethernet or configure manually)

        ⚠️ **Warning:** The default password `iot2023!` is insecure and intended for development purposes only.  
        Please **be sure to set your own password using Pi Imager** to ensure security.
        
        ## 🔧 Manual Configuration (Alternative)
        
        If you don't use Pi Imager advanced options, you can configure manually:
        
        ### WiFi Setup:
        \`\`\`bash
        sudo raspi-config
        # Select "System Options" → "Wireless LAN"
        \`\`\`
        
        ### SSH Access:
        \`\`\`bash
        ssh iot@<raspberry-pi-ip>
        # Password: iot2023! (if not changed via Pi Imager)
        \`\`\`
        
        ## 🎮 Application Control
        
        \`\`\`bash
        # Check status
        systemctl status teo-der-topf
        
        # View logs
        journalctl -u teo-der-topf -f
        
        # Manual control
        cd ~/teotopf
        ./app.sh      # Start
        ./stop_app.sh # Stop
        \`\`\`
        
        ## 🔍 Troubleshooting
        
        - **Find IP address:** Check your router or use \`nmap -sn 192.168.1.0/24\`
        - **Build info:** \`cat ~/BUILD_INFO.txt\`
        - **Hardware test:** \`i2cdetect -y 1\`
        - **Service logs:** \`journalctl -u teo-der-topf --no-pager\`
        
        ## 📱 System Requirements
        - **SD Card:** Minimum 8GB (recommend 16GB Class 10)
        - **Raspberry Pi:** Zero W, 3B+, 4B, 5 (all compatible)
        - **Power:** 5V 2.5A+ recommended
        
        ---
        **Viel Spaß mit Teo der Topf! 🤖🌱**
        GUIDE_EOF
        
        zip -9 "${FINAL_NAME}.zip" "INSTALLATION_GUIDE.md"
        
        echo "=== BUILD COMPLETE ==="
        echo "Image: $FINAL_NAME"
        echo "Size: $(du -h $FINAL_NAME | cut -f1)"
        echo "Compressed: $(du -h ${FINAL_NAME}.zip | cut -f1)"
        echo "Pi Imager Support: ✅ Full integration"
        echo "======================="
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.image_name }}
        path: |
          rpi-image-gen/deploy/*.zip
          rpi-image-gen/deploy/INSTALLATION_GUIDE.md
        retention-days: 30
        compression-level: 0
        
    - name: Create release with Pi Imager support
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: 🤖 Teo der Topf v${{ github.ref_name }} (Pi Imager Ready)
        body: |
          # 🤖 Teo der Topf - Raspberry Pi Image v${{ github.ref_name }}
          
          Ein vollständig vorkonfiguriertes Raspberry Pi Image mit **vollständiger Raspberry Pi Imager Unterstützung**.
          
          ## 🎯 **Neu: Raspberry Pi Imager Integration**
          
          ✨ **Einfacher geht's nicht:**
          1. **Pi Imager öffnen** → Custom Image auswählen
          2. **Zahnrad-Symbol klicken** ⚙️ → Erweiterte Optionen
          3. **WiFi, Benutzer, SSH konfigurieren** → Nach Wunsch
          4. **Flashen & Einschalten** → Fertig! 🎉
          
          ## 📦 Image Details
          - **Version**: ${{ steps.version.outputs.version }}
          - **Build**: ${{ steps.version.outputs.build_date }}
          - **Commit**: ${{ steps.version.outputs.commit_sha }}
          - **Base OS**: Raspberry Pi OS Lite (Bookworm, 32-bit)
          
          ## ✨ Pi Imager Features
          - 🌐 **WiFi-Konfiguration** über Pi Imager UI
          - 👤 **Benutzerdaten-Einstellung** über Pi Imager UI  
          - 🔐 **SSH-Aktivierung** über Pi Imager UI
          - 🏠 **Automatischer Fallback** auf iot/iot2023! falls nicht konfiguriert
          - 🔄 **Dynamische Benutzer-Anpassung** zur Laufzeit
          
          ## 🚀 Installation Optionen
          
          ### Option 1: Pi Imager (Empfohlen) 🌟
          ```
          1. Pi Imager herunterladen & starten
          2. Custom Image → Diese .img Datei auswählen
          3. ⚙️ Erweiterte Optionen konfigurieren
          4. Flashen → SD-Karte einlegen → Einschalten
          ```
          
          ### Option 2: Standard (Fallback)
          ```
          1. Image flashen ohne erweiterte Optionen
          2. Anmeldung: iot / iot2023!
          3. WiFi manuell konfigurieren
          ```
          
          ## 🔧 Systemsteuerung
          
          ```bash
          # SSH-Zugang (abhängig von Pi Imager Konfiguration)
          ssh <dein-benutzer>@<raspberry-pi-ip>
          
          # Standard falls nicht konfiguriert:
          ssh iot@<raspberry-pi-ip>  # Passwort: iot2023!
          
          # Anwendung verwalten
          systemctl status teo-der-topf     # Status
          journalctl -u teo-der-topf -f     # Logs
          sudo systemctl restart teo-der-topf  # Neustart
          
          # Manuelle Steuerung
          cd ~/teotopf
          ./app.sh      # Start
          ./stop_app.sh # Stop
          ```
          
          ## 📋 Technische Features
          
          - ✅ **Hardware vorkonfiguriert**: SPI, I2C, UART, I2S
          - ✅ **Python Virtual Environment**: Alle Dependencies vorinstalliert
          - ✅ **Systemd Service**: Robuster Autostart mit Überwachung
          - ✅ **Dynamische Benutzer-Unterstützung**: Anpassung via Pi Imager
          - ✅ **Optimiert**: Minimaler Speicherbedarf, maximale Performance
          - ✅ **WiFi Ready**: Konfiguration über Pi Imager oder manuell
          
          ## 🔍 Fehlerbehebung
          
          - **Build-Info anzeigen**: `cat ~/BUILD_INFO.txt`
          - **IP-Adresse finden**: Router-Interface oder `nmap -sn 192.168.1.0/24`
          - **Hardware testen**: `i2cdetect -y 1`
          - **Service-Status**: `systemctl status teo-der-topf`
          - **Vollständige Logs**: `journalctl -u teo-der-topf --no-pager`
          
          ## 📋 Systemanforderungen
          
          - **SD-Karte**: Min. 8GB (empfohlen: 16GB Class 10)
          - **Raspberry Pi**: Zero W, 3B+, 4B, 5 (alle kompatibel)
          - **Netzteil**: 5V 2.5A+ empfohlen
          
          ---
          
          **🎉 Mit Pi Imager Integration ist Teo der Topf jetzt noch einfacher zu installieren!**
        draft: false
        prerelease: false
        
    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rpi-image-gen/deploy/${{ steps.version.outputs.image_name }}.img.zip
        asset_name: ${{ steps.version.outputs.image_name }}.zip
        asset_content_type: application/zip