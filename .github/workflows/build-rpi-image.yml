name: Build Teo der Topf Raspberry Pi Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: 'false'
      custom_hostname:
        description: 'Custom hostname'
        required: false
        default: 'teo-der-topf'

env:
  IMAGE_NAME: teo-der-topf

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Teo der Topf repository
      uses: actions/checkout@v4
      with:
        path: teo-source
        fetch-depth: 0
        
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support fdisk kpartx zip unzip wget curl xz-utils
        sudo apt-get install -y debootstrap systemd-container parted e2fsprogs
        
        # Download latest Raspberry Pi OS Lite image
        echo "Downloading Raspberry Pi OS Lite image..."
        wget -O raspios-lite.img.xz "https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2024-07-04/2024-07-04-raspios-bookworm-armhf-lite.img.xz"
        
        echo "Extracting image..."
        xz -d raspios-lite.img.xz
        mv raspios-lite.img base-image.img
        
        echo "Base image ready: $(ls -lh base-image.img)"
        
    - name: Extract version and build info
      id: version
      run: |
        cd teo-source
        VERSION=$(grep -oP '__version__\s*=\s*"\K[^"]+' version.py || echo "dev")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        BUILD_DATE=$(date +%Y%m%d-%H%M)
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        IMAGE_FULL_NAME="${{ env.IMAGE_NAME }}-v${VERSION}-${BUILD_DATE}-${COMMIT_SHA}"
        echo "image_name=$IMAGE_FULL_NAME" >> $GITHUB_OUTPUT
        
    - name: Create custom image build script
      run: |
        # Create the main build script
        cat > build-custom-image.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Configuration
        BASE_IMAGE="base-image.img"
        FINAL_IMAGE="${{ steps.version.outputs.image_name }}.img"
        MOUNT_DIR="/tmp/rpi-mount"
        LOOP_DEVICE=""
        
        cleanup() {
            echo "Cleaning up..."
            if [ -n "$LOOP_DEVICE" ]; then
                sudo umount "${MOUNT_DIR}/boot" 2>/dev/null || true
                sudo umount "${MOUNT_DIR}" 2>/dev/null || true
                sudo kpartx -d "$LOOP_DEVICE" 2>/dev/null || true
                sudo losetup -d "$LOOP_DEVICE" 2>/dev/null || true
            fi
            sudo rm -rf "$MOUNT_DIR" 2>/dev/null || true
        }
        trap cleanup EXIT
        
        # Create working copy
        echo "Creating working copy of base image..."
        cp "$BASE_IMAGE" "$FINAL_IMAGE"
        
        # Resize image to have more space
        echo "Expanding image size..."
        dd if=/dev/zero bs=1M count=2048 >> "$FINAL_IMAGE"
        
        # Setup loop device
        LOOP_DEVICE=$(sudo losetup -f --show "$FINAL_IMAGE")
        echo "Using loop device: $LOOP_DEVICE"
        
        # Resize partition
        sudo parted "$LOOP_DEVICE" resizepart 2 100%
        sudo kpartx -av "$LOOP_DEVICE"
        
        # Get partition devices
        BOOT_DEV="/dev/mapper/$(basename $LOOP_DEVICE)p1"
        ROOT_DEV="/dev/mapper/$(basename $LOOP_DEVICE)p2"
        
        # Wait for devices
        sleep 2
        
        # Resize filesystem
        sudo e2fsck -f "$ROOT_DEV" || true
        sudo resize2fs "$ROOT_DEV"
        
        # Mount filesystems
        sudo mkdir -p "$MOUNT_DIR"
        sudo mount "$ROOT_DEV" "$MOUNT_DIR"
        sudo mkdir -p "${MOUNT_DIR}/boot"
        sudo mount "$BOOT_DEV" "${MOUNT_DIR}/boot"
        
        # Configure hardware in config.txt
        echo "Configuring hardware support..."
        if ! grep -q "# Teo der Topf Hardware Configuration" "${MOUNT_DIR}/boot/config.txt"; then
            echo "" >> "${MOUNT_DIR}/boot/config.txt"
            echo "# Teo der Topf Hardware Configuration" >> "${MOUNT_DIR}/boot/config.txt"
            echo "dtparam=spi=on" >> "${MOUNT_DIR}/boot/config.txt"
            echo "dtparam=i2c_arm=on" >> "${MOUNT_DIR}/boot/config.txt"
            echo "dtparam=i2s=on" >> "${MOUNT_DIR}/boot/config.txt"
            echo "enable_uart=1" >> "${MOUNT_DIR}/boot/config.txt"
            echo "" >> "${MOUNT_DIR}/boot/config.txt"
            echo "# Performance optimization" >> "${MOUNT_DIR}/boot/config.txt"
            echo "gpu_mem=16" >> "${MOUNT_DIR}/boot/config.txt"
            echo "disable_camera_led=1" >> "${MOUNT_DIR}/boot/config.txt"
            echo "dtparam=audio=off" >> "${MOUNT_DIR}/boot/config.txt"
        fi
        
        # Setup chroot environment
        echo "Setting up chroot environment..."
        sudo cp /usr/bin/qemu-arm-static "${MOUNT_DIR}/usr/bin/"
        
        # Call the package setup script (creates iot user)
        ./setup-packages.sh "$MOUNT_DIR"
        
        # Copy Teo project AFTER user creation
        echo "Installing Teo der Topf application..."
        sudo cp -r teo-source/* "${MOUNT_DIR}/home/iot/"
        sudo chown -R iot:iot "${MOUNT_DIR}/home/iot/"
        
        # Call the Python setup script
        ./setup-python.sh "$MOUNT_DIR"
        
        # Call the service setup script
        ./setup-service.sh "$MOUNT_DIR"
        
        # Call the Pi Imager setup script
        ./setup-firstrun.sh "$MOUNT_DIR"
        
        # Create build info
        cat > "${MOUNT_DIR}/home/iot/BUILD_INFO.txt" << 'BUILD_INFO_EOF'
        Teo der Topf - Custom Raspberry Pi Image
        ========================================
        
        Version: ${{ steps.version.outputs.version }}
        Build: ${{ steps.version.outputs.build_date }}
        Commit: ${{ steps.version.outputs.commit_sha }}
        
        Default Credentials:
        - User: iot
        - Password: iot2023!
        
        Pi Imager Support:
        - WiFi, SSH, User configuration via Pi Imager advanced options
        - Hardware: SPI, I2C, UART pre-configured
        - Auto-start: Teo application starts automatically
        
        Control Commands:
        - systemctl status teo-der-topf
        - journalctl -u teo-der-topf -f
        - ~/app.sh / ~/stop_app.sh
        BUILD_INFO_EOF
        
        sudo chown iot:iot "${MOUNT_DIR}/home/iot/BUILD_INFO.txt"
        
        # Clean up temporary files
        sudo rm -f "${MOUNT_DIR}/tmp/setup.sh" "${MOUNT_DIR}/tmp/python-setup.sh"
        sudo rm -f "${MOUNT_DIR}/usr/bin/qemu-arm-static"
        
        # Create empty files for Pi Imager
        sudo touch "${MOUNT_DIR}/boot/ssh"
        sudo touch "${MOUNT_DIR}/boot/userconf.txt"  
        sudo touch "${MOUNT_DIR}/boot/wpa_supplicant.conf"
        
        echo "Image customization complete!"
        EOF
        
        # Create package setup script
        cat > setup-packages.sh << 'EOF'
        #!/bin/bash
        MOUNT_DIR="$1"
        
        cat > "${MOUNT_DIR}/tmp/setup.sh" << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        export DEBIAN_FRONTEND=noninteractive
        
        # Update packages
        apt-get update
        apt-get install -y --no-install-recommends \
          python3 python3-pip python3-venv python3-dev \
          python3-pil python3-numpy git vim \
          i2c-tools fonts-dejavu \
          libopenjp2-7 libfreetype6-dev libjpeg-dev libpng-dev \
          zlib1g-dev liblcms2-dev libwebp-dev
        
        # Create iot user
        useradd -m -s /bin/bash iot
        echo "iot:iot2023!" | chpasswd
        usermod -aG sudo,spi,i2c,gpio iot
        
        # Setup autologin
        mkdir -p /etc/systemd/system/getty@tty1.service.d/
        cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << 'AUTOLOGIN_EOF'
        [Service]
        ExecStart=
        ExecStart=-/sbin/agetty --autologin iot --noclear %I $TERM
        AUTOLOGIN_EOF
        
        # Enable SSH
        systemctl enable ssh
        
        # Load hardware modules at boot
        echo "i2c-dev" >> /etc/modules
        echo "spi-dev" >> /etc/modules
        
        # Cleanup
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        SCRIPT_EOF
        
        sudo chmod +x "${MOUNT_DIR}/tmp/setup.sh"
        sudo chroot "$MOUNT_DIR" /tmp/setup.sh
        EOF
        
        # Create Python setup script
        cat > setup-python.sh << 'EOF'
        #!/bin/bash
        MOUNT_DIR="$1"
        
        cat > "${MOUNT_DIR}/tmp/python-setup.sh" << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        cd /home/iot
        sudo -u iot python3 -m venv teo-venv
        sudo -u iot teo-venv/bin/pip install --upgrade pip
        
        if [ -f requirements.txt ]; then
            sudo -u iot teo-venv/bin/pip install -r requirements.txt
        fi
        
        # Make scripts executable
        chmod +x app.sh stop_app.sh ApplicationSetup.sh 2>/dev/null || true
        SCRIPT_EOF
        
        sudo chmod +x "${MOUNT_DIR}/tmp/python-setup.sh"
        sudo chroot "$MOUNT_DIR" /tmp/python-setup.sh
        EOF
        
        # Create service setup script
        cat > setup-service.sh << 'EOF'
        #!/bin/bash
        MOUNT_DIR="$1"
        
        cat > "${MOUNT_DIR}/etc/systemd/system/teo-der-topf.service" << 'SCRIPT_EOF'
        [Unit]
        Description=Teo der Topf Application
        After=network-online.target
        Wants=network-online.target
        
        [Service]
        Type=simple
        User=iot
        Group=iot
        WorkingDirectory=/home/iot
        Environment=PATH=/home/iot/teo-venv/bin
        ExecStartPre=/bin/sleep 30
        ExecStart=/home/iot/teo-venv/bin/python main.py
        Restart=always
        RestartSec=10
        
        [Install]
        WantedBy=multi-user.target
        SCRIPT_EOF
        
        # Enable service
        sudo chroot "$MOUNT_DIR" systemctl enable teo-der-topf.service
        EOF
        
        # Create firstrun setup script  
        cat > setup-firstrun.sh << 'EOF'
        #!/bin/bash
        MOUNT_DIR="$1"
        
        cat > "${MOUNT_DIR}/boot/firstrun.sh" << 'SCRIPT_EOF'
        #!/bin/bash
        set +e
        
        # Handle Pi Imager advanced options
        if [ -f /boot/userconf.txt ]; then
            source /boot/userconf.txt
            if [ -n "$PI_USER" ] && [ "$PI_USER" != "iot" ]; then
                # Update user configuration for new user
                usermod -l "$PI_USER" iot
                usermod -d "/home/$PI_USER" -m "$PI_USER"
                if [ -n "$PI_PASS" ]; then
                    echo "$PI_USER:$PI_PASS" | chpasswd
                fi
                # Update systemd service
                sed -i "s/User=iot/User=$PI_USER/g" /etc/systemd/system/teo-der-topf.service
                sed -i "s|WorkingDirectory=/home/iot|WorkingDirectory=/home/$PI_USER|g" /etc/systemd/system/teo-der-topf.service
                sed -i "s|Environment=PATH=/home/iot/teo-venv|Environment=PATH=/home/$PI_USER/teo-venv|g" /etc/systemd/system/teo-der-topf.service
                sed -i "s|ExecStart=/home/iot/teo-venv|ExecStart=/home/$PI_USER/teo-venv|g" /etc/systemd/system/teo-der-topf.service
                sed -i "s/--autologin iot/--autologin $PI_USER/g" /etc/systemd/system/getty@tty1.service.d/autologin.conf
            fi
            rm -f /boot/userconf.txt
        fi
        
        # Handle WiFi from Pi Imager
        if [ -f /boot/wpa_supplicant.conf ]; then
            mv /boot/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
            chmod 600 /etc/wpa_supplicant/wpa_supplicant.conf
        fi
        
        # Enable SSH if requested
        if [ -f /boot/ssh ]; then
            systemctl enable ssh
            rm -f /boot/ssh
        fi
        
        systemctl daemon-reload
        rm -f /boot/firstrun.sh
        sed -i '/firstrun\.sh/d' /boot/config.txt
        exit 0
        SCRIPT_EOF
        
        sudo chmod +x "${MOUNT_DIR}/boot/firstrun.sh"
        
        # Add firstrun to config.txt if not already there
        if ! grep -q "firstrun.sh" "${MOUNT_DIR}/boot/config.txt"; then
            echo "" >> "${MOUNT_DIR}/boot/config.txt"
            echo "# Pi Imager firstrun script" >> "${MOUNT_DIR}/boot/config.txt"
        fi
        EOF
        
        # Make all scripts executable
        chmod +x build-custom-image.sh setup-packages.sh setup-python.sh setup-service.sh setup-firstrun.sh
        
    - name: Build custom Raspberry Pi image
      run: |
        if [ "${{ github.event.inputs.debug_enabled }}" = "true" ]; then
            set -x
        fi
        
        sudo ./build-custom-image.sh
        
    - name: Post-process and create release package
      run: |
        IMAGE_FILE="${{ steps.version.outputs.image_name }}.img"
        
        if [ ! -f "$IMAGE_FILE" ]; then
            echo "Error: Image file not found!"
            exit 1
        fi
        
        # Create checksums
        sha256sum "$IMAGE_FILE" > "${IMAGE_FILE}.sha256"
        md5sum "$IMAGE_FILE" > "${IMAGE_FILE}.md5"
        
        # Compress image
        echo "Compressing image..."
        zip -9 "${IMAGE_FILE}.zip" "$IMAGE_FILE" "${IMAGE_FILE}.sha256" "${IMAGE_FILE}.md5"
        
        
        # Create installation guide
        cat > "INSTALLATION_GUIDE.md" << GUIDE_EOF
        # 🤖 Teo der Topf - Installation Guide
        
        ## 🚀 Quick Start with Raspberry Pi Imager (Recommended)
        
        1. **Download** [Raspberry Pi Imager](https://www.raspberrypi.org/software/)
        2. **Extract** this ZIP file and select the .img file in Pi Imager
        3. **Click the gear icon** ⚙️ for advanced options:
           - ✅ **Enable SSH** (set username/password if desired)
           - ✅ **Configure WiFi** (SSID and password)
           - ✅ **Set username and password** (or leave default: iot/iot2023!)
           - ✅ **Set locale settings**
        4. **Flash to SD card** (minimum 8GB, recommend 16GB Class 10)
        5. **Insert SD card** into Raspberry Pi and power on
        6. **Done!** 🎉 Teo starts automatically
        
        ## 📋 Default Configuration (if not using Pi Imager advanced options)
        - **Username:** iot
        - **Password:** iot2023!
        - **SSH:** Enabled
        - **WiFi:** Not configured (use ethernet or configure manually)

        ⚠️ **Warning:** The default password `iot2023!` is insecure and intended for development purposes only.  
        Please **be sure to set your own password using Pi Imager** to ensure security.
        
        ## 🔧 Manual Configuration (Alternative)
        
        If you don't use Pi Imager advanced options, you can configure manually:
        
        ### WiFi Setup:
        \`\`\`bash
        sudo raspi-config
        # Select "System Options" → "Wireless LAN"
        \`\`\`
        
        ### SSH Access:
        \`\`\`bash
        ssh iot@<raspberry-pi-ip>
        # Password: iot2023! (if not changed via Pi Imager)
        \`\`\`
        
        ## 🎮 Application Control
        
        \`\`\`bash
        # Check status
        systemctl status teo-der-topf
        
        # View logs
        journalctl -u teo-der-topf -f
        
        # Manual control
        cd ~/teotopf
        ./app.sh      # Start
        ./stop_app.sh # Stop
        \`\`\`
        
        ## 🔍 Troubleshooting
        
        - **Find IP address:** Check your router or use \`nmap -sn 192.168.1.0/24\`
        - **Build info:** \`cat ~/BUILD_INFO.txt\`
        - **Hardware test:** \`i2cdetect -y 1\`
        - **Service logs:** \`journalctl -u teo-der-topf --no-pager\`
        
        ## 📱 System Requirements
        - **SD Card:** Minimum 8GB (recommend 16GB Class 10)
        - **Raspberry Pi:** Zero W, 3B+, 4B, 5 (all compatible)
        - **Power:** 5V 2.5A+ recommended
        
        ---
        **Viel Spaß mit Teo der Topf! 🤖🌱**
        GUIDE_EOF
        
        # Add guide to zip
        zip -9 "${IMAGE_FILE}.zip" "INSTALLATION_GUIDE.md"
        
        echo "=== BUILD COMPLETE ==="
        echo "Image: $IMAGE_FILE"
        echo "Size: $(du -h $IMAGE_FILE | cut -f1)"
        echo "Compressed: $(du -h ${IMAGE_FILE}.zip | cut -f1)"
        echo "Pi Imager Support: ✅ Included"
        echo "======================="
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.image_name }}
        path: |
          *.zip
          INSTALLATION_GUIDE.md
        retention-days: 30
        compression-level: 0
        
    - name: Create release with Pi Imager support
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: 🤖 Teo der Topf v${{ github.ref_name }} (Pi Imager Ready)
        body: |
          # 🤖 Teo der Topf - Raspberry Pi Image v${{ github.ref_name }}
          
          Ein vollständig vorkonfiguriertes Raspberry Pi Image mit **vollständiger Raspberry Pi Imager Unterstützung**.
          
          ## 🎯 **Neu: Raspberry Pi Imager Integration**
          
          ✨ **Einfacher geht's nicht:**
          1. **Pi Imager öffnen** → Custom Image auswählen
          2. **Zahnrad-Symbol klicken** ⚙️ → Erweiterte Optionen
          3. **WiFi, Benutzer, SSH konfigurieren** → Nach Wunsch
          4. **Flashen & Einschalten** → Fertig! 🎉
          
          ## 📦 Image Details
          - **Version**: ${{ steps.version.outputs.version }}
          - **Build**: ${{ steps.version.outputs.build_date }}
          - **Commit**: ${{ steps.version.outputs.commit_sha }}
          - **Base OS**: Raspberry Pi OS Lite (Bookworm, 32-bit)
          
          ## ✨ Pi Imager Features
          - 🌐 **WiFi-Konfiguration** über Pi Imager UI
          - 👤 **Benutzerdaten-Einstellung** über Pi Imager UI  
          - 🔐 **SSH-Aktivierung** über Pi Imager UI
          - 🏠 **Automatischer Fallback** auf iot/iot2023! falls nicht konfiguriert
          - 🔄 **Dynamische Benutzer-Anpassung** zur Laufzeit
          
          ## 🚀 Installation Optionen
          
          ### Option 1: Pi Imager (Empfohlen) 🌟
          ```
          1. Pi Imager herunterladen & starten
          2. Custom Image → Diese .img Datei auswählen
          3. ⚙️ Erweiterte Optionen konfigurieren
          4. Flashen → SD-Karte einlegen → Einschalten
          ```
          
          ### Option 2: Standard (Fallback)
          ```
          1. Image flashen ohne erweiterte Optionen
          2. Anmeldung: iot / iot2023!
          3. WiFi manuell konfigurieren
          ```
          
          ## 🔧 Systemsteuerung
          
          ```bash
          # SSH-Zugang (abhängig von Pi Imager Konfiguration)
          ssh <dein-benutzer>@<raspberry-pi-ip>
          
          # Standard falls nicht konfiguriert:
          ssh iot@<raspberry-pi-ip>  # Passwort: iot2023!
          
          # Anwendung verwalten
          systemctl status teo-der-topf     # Status
          journalctl -u teo-der-topf -f     # Logs
          sudo systemctl restart teo-der-topf  # Neustart
          
          # Manuelle Steuerung
          cd ~/teotopf
          ./app.sh      # Start
          ./stop_app.sh # Stop
          ```
          
          ## 📋 Technische Features
          
          - ✅ **Hardware vorkonfiguriert**: SPI, I2C, UART, I2S
          - ✅ **Python Virtual Environment**: Alle Dependencies vorinstalliert
          - ✅ **Systemd Service**: Robuster Autostart mit Überwachung
          - ✅ **Dynamische Benutzer-Unterstützung**: Anpassung via Pi Imager
          - ✅ **Optimiert**: Minimaler Speicherbedarf, maximale Performance
          - ✅ **WiFi Ready**: Konfiguration über Pi Imager oder manuell
          
          ## 🔍 Fehlerbehebung
          
          - **Build-Info anzeigen**: `cat ~/BUILD_INFO.txt`
          - **IP-Adresse finden**: Router-Interface oder `nmap -sn 192.168.1.0/24`
          - **Hardware testen**: `i2cdetect -y 1`
          - **Service-Status**: `systemctl status teo-der-topf`
          - **Vollständige Logs**: `journalctl -u teo-der-topf --no-pager`
          
          ## 📋 Systemanforderungen
          
          - **SD-Karte**: Min. 8GB (empfohlen: 16GB Class 10)
          - **Raspberry Pi**: Zero W, 3B+, 4B, 5 (alle kompatibel)
          - **Netzteil**: 5V 2.5A+ empfohlen
          
          ---
          
          **🎉 Mit Pi Imager Integration ist Teo der Topf jetzt noch einfacher zu installieren!**
        draft: false
        prerelease: false
        
    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.version.outputs.image_name }}.img.zip
        asset_name: ${{ steps.version.outputs.image_name }}.zip
        asset_content_type: application/zip